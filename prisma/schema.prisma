generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String           @id @default(cuid())
  name            String
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  creatorProfile  String?          @unique
  isCreator       Boolean          @default(false)
  bio             String?          @db.Text
  topmateUrl      String?
  accounts        Account[]
  sessions        Session[]
  socialLinks     SocialLink[]
  events          Event[]
  registrations   Registration[]
  audienceMembers AudienceMember[]
  host            Host[]
}

model Event {
  id               String         @id @default(cuid())
  title            String
  thumbnail        String?
  description      String?        @db.Text
  eventUrl         String?
  eventType        String?
  eventLocation    String?
  datetime         DateTime
  duration         Int?
  creatorId        String
  audienceMemberId String?
  creator          User           @relation(fields: [creatorId], references: [id])
  registrations    Registration[]
  hosts            Host[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

model Host {
  id      String @id @default(cuid())
  eventId String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event   Event  @relation(fields: [eventId], references: [id])

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model AudienceMember {
  id                 String   @id @default(cuid())
  name               String
  email              String
  userId             String
  isPaying           Boolean?
  revenue            Int?
  emailOpenRate      Int?
  emailClickRate     Int?
  eventsParticipated Int?
  creatorId          String
  creator            User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
}

model Registration {
  id      String @id @default(cuid())
  eventId String
  userId  String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model SocialLink {
  id        String @id @default(cuid())
  type      String
  url       String
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([type, creatorId])
  @@index([creatorId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
